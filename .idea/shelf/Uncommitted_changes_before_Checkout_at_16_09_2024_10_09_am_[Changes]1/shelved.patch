Index: src/main/resources/com/example/project/hello-view.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.geometry.Insets?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.VBox?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<VBox alignment=\"CENTER\" spacing=\"20.0\" xmlns:fx=\"http://javafx.com/fxml\"\r\n      fx:controller=\"com.example.project.HelloController\">\r\n  <padding>\r\n    <Insets bottom=\"20.0\" left=\"20.0\" right=\"20.0\" top=\"20.0\"/>\r\n  </padding>\r\n\r\n  <Label fx:id=\"welcomeText\"/>\r\n  <Button text=\"Hello!\" onAction=\"#onHelloButtonClick\"/>\r\n  <Button fx:id=\"registerButton\" text=\"Register\" onAction=\"#onRegisterButtonClick\"/>\r\n</VBox>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/example/project/hello-view.fxml b/src/main/resources/com/example/project/hello-view.fxml
--- a/src/main/resources/com/example/project/hello-view.fxml	
+++ b/src/main/resources/com/example/project/hello-view.fxml	
@@ -1,17 +1,33 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Button?>
 <?import javafx.scene.control.Label?>
+<?import javafx.scene.control.PasswordField?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.Pane?>
 <?import javafx.scene.layout.VBox?>
 
-<?import javafx.scene.control.Button?>
-<VBox alignment="CENTER" spacing="20.0" xmlns:fx="http://javafx.com/fxml"
-      fx:controller="com.example.project.HelloController">
-  <padding>
-    <Insets bottom="20.0" left="20.0" right="20.0" top="20.0"/>
-  </padding>
+<VBox alignment="CENTER" prefHeight="347.0" prefWidth="616.0" spacing="20" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.project.controller.LoginController">
+  <HBox fx:id="topMenu" alignment="CENTER" spacing="10" />
+  <HBox alignment="CENTER">
+      <Pane prefHeight="191.0" prefWidth="522.0" style="-fx-background-color: C8915E; -fx-opacity: 80; -fx-background-radius: 30;" stylesheets="@stylesheet.css">
+         <children>
+             <Button fx:id="loginButton" layoutX="233.0" layoutY="96.0" onAction="#loginProcess" text="Login" />
+             <Button layoutX="158.0" layoutY="96.0" text="Register" />
+          <Button fx:id="GuestLogin" layoutX="290.0" layoutY="96.0" onAction="#onGuestLoginClick" text="Guest Temp process" />
+      
+          <Label layoutX="51.0" layoutY="63.0" text="Username:" />
+          <Label layoutX="264.0" layoutY="63.0" text="Password:" />
+          <TextField fx:id="userNameTextField" layoutX="107.0" layoutY="59.0" />
+            <PasswordField fx:id="passworPasswordField" layoutX="317.0" layoutY="59.0" />
+            <Label fx:id="InvalidPass" visible="false" layoutX="198.0" layoutY="133.0" text="Bad User or Password" textFill="#721414" />
+         </children>
+      </Pane>
+  </HBox>
+  <HBox>
 
-  <Label fx:id="welcomeText"/>
-  <Button text="Hello!" onAction="#onHelloButtonClick"/>
+  </HBox>
+
   <Button fx:id="registerButton" text="Register" onAction="#onRegisterButtonClick"/>
 </VBox>
Index: src/main/java/com/example/project/HelloController.java
===================================================================
diff --git a/src/main/java/com/example/project/HelloController.java b/src/main/java/com/example/project/HelloController.java
deleted file mode 100644
--- a/src/main/java/com/example/project/HelloController.java	
+++ /dev/null	
@@ -1,31 +0,0 @@
-package com.example.project;
-
-import javafx.fxml.FXML;
-import javafx.fxml.FXMLLoader;
-import javafx.scene.Scene;
-import javafx.scene.control.Label;
-import javafx.scene.control.Button;
-import javafx.stage.Stage;
-
-import java.io.IOException;
-
-public class HelloController {
-    @FXML
-    private Label welcomeText;
-
-    @FXML
-    private Button registerButton;
-
-    @FXML
-    protected void onHelloButtonClick() {
-        welcomeText.setText("Welcome to JavaFX Application!");
-    }
-
-    @FXML
-    protected void onRegisterButtonClick() throws IOException {
-        Stage stage = (Stage) registerButton.getScene().getWindow();
-        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource("register-view.fxml"));
-        Scene scene = new Scene(fxmlLoader.load(), HelloApplication.WIDTH, HelloApplication.HEIGHT);
-        stage.setScene(scene);
-    }
-}
\ No newline at end of file
Index: src/main/java/com/example/project/HelloApplication.java
===================================================================
diff --git a/src/main/java/com/example/project/HelloApplication.java b/src/main/java/com/example/project/HelloApplication.java
deleted file mode 100644
--- a/src/main/java/com/example/project/HelloApplication.java	
+++ /dev/null	
@@ -1,27 +0,0 @@
-package com.example.project;
-
-import javafx.application.Application;
-import javafx.fxml.FXMLLoader;
-import javafx.scene.Scene;
-import javafx.stage.Stage;
-
-import java.io.IOException;
-
-public class HelloApplication extends Application {
-
-    public static final int WIDTH = 640;
-    public static final int HEIGHT = 360;
-
-    @Override
-    public void start(Stage stage) throws IOException {
-        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource("hello-view.fxml"));
-        Scene scene = new Scene(fxmlLoader.load(), 320, 240);
-        stage.setTitle("Hello! Test");
-        stage.setScene(scene);
-        stage.show();
-    }
-
-    public static void main(String[] args) {
-        launch();
-    }
-}
\ No newline at end of file
Index: src/main/java/com/example/project/controller/CreateNewProjectController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/controller/CreateNewProjectController.java b/src/main/java/com/example/project/controller/CreateNewProjectController.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/controller/CreateNewProjectController.java	
@@ -0,0 +1,58 @@
+package com.example.project.controller;
+
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import javafx.fxml.FXML;
+import javafx.fxml.Initializable;
+import javafx.scene.control.ComboBox;
+import javafx.scene.control.TextArea;
+import javafx.scene.control.TextField;
+import javafx.scene.image.ImageView;
+
+import java.net.URL;
+import java.util.ResourceBundle;
+
+public class CreateNewProjectController implements Initializable {
+
+    @FXML
+    private TextField titleField;
+
+    @FXML
+    private TextArea descriptionField;
+
+    @FXML
+    private ComboBox<String> visibilityComboBox;
+
+    @FXML
+    private ImageView cardImageView;
+
+    @FXML
+    private TextField colourField;
+
+    @Override
+    public void initialize(URL location, ResourceBundle resources) {
+        ObservableList<String> visibilityOptions = FXCollections.observableArrayList("Private", "Public");
+        visibilityComboBox.setItems(visibilityOptions);
+    }
+
+    @FXML
+    protected void goBack() {
+        System.out.println("Going back to the previous screen.");
+    }
+
+    @FXML
+    protected void publishProject() {
+
+        String title = titleField.getText();
+        String description = descriptionField.getText();
+        String visibility = visibilityComboBox.getValue();
+        String colour = colourField.getText();
+
+
+        System.out.println("Publishing project:");
+        System.out.println("Title: " + title);
+        System.out.println("Description: " + description);
+        System.out.println("Visibility: " + visibility);
+        System.out.println("Colour: " + colour);
+    }
+}
Index: src/main/java/com/example/project/ApplicationStart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/ApplicationStart.java b/src/main/java/com/example/project/ApplicationStart.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/ApplicationStart.java	
@@ -0,0 +1,30 @@
+package com.example.project;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+import java.io.IOException;
+
+public class ApplicationStart extends Application {
+    public static final String TITLE = "Model Hut";
+    public static final int WIDTH = 800;
+    public static final int HEIGHT = 400;
+
+
+    @Override
+    public void start(Stage stage) throws IOException {
+        FXMLLoader fxmlLoader = new FXMLLoader(ApplicationStart.class.getResource("register-view.fxml"));
+        Scene scene = new Scene(fxmlLoader.load(),WIDTH,HEIGHT);
+        scene.getStylesheets().add(getClass().getResource("stylesheet.css").toExternalForm());
+        stage.setTitle(TITLE);
+        stage.setScene(scene);
+        stage.show();
+    }
+
+    public static void main(String[] args) {
+        launch();
+    }
+
+}
\ No newline at end of file
Index: src/main/java/com/example/project/controller/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/controller/LoginController.java b/src/main/java/com/example/project/controller/LoginController.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/controller/LoginController.java	
@@ -0,0 +1,141 @@
+package com.example.project.controller;
+
+import com.example.project.ApplicationStart;
+import com.example.project.model.SqliteUserDAO;
+import com.example.project.model.User;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.control.PasswordField;
+import javafx.scene.control.TextField;
+import javafx.stage.Stage;
+
+
+import com.example.project.model.User.*;
+
+import java.io.IOException;
+import java.net.URL;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.ResourceBundle;
+
+public class LoginController {
+    @FXML
+    private TextField userNameTextField;
+    @FXML
+    private PasswordField passworPasswordField;
+    @FXML
+    private Button loginButton;
+    @FXML
+    private Button GuestLogin;
+    @FXML
+    private Label InvalidPass;
+
+    //SQL user instance
+    private SqliteUserDAO userDAO;
+
+    public void initialize() {
+        userDAO = new SqliteUserDAO(); // Initialize the DAO here
+    }
+
+    /**
+     * Login without username and password using guest
+     * @throws IOException Issues for login
+     */
+    @FXML
+    protected void onGuestLoginClick() throws IOException {
+        Stage stage = (Stage) GuestLogin.getScene().getWindow();
+        FXMLLoader fxmlLoader = new FXMLLoader(ApplicationStart.class.getResource("Owner-Dashboard.fxml"));
+
+        User guestUser = new User("","","");
+
+        DashboardController dashboardController = new DashboardController(true, guestUser);
+        // Guest login, so set to `true`
+        fxmlLoader.setController(dashboardController);
+        Scene scene = new Scene(fxmlLoader.load(), ApplicationStart.WIDTH, ApplicationStart.HEIGHT);
+        String stylesheet = ApplicationStart.class.getResource("stylesheet.css").toExternalForm();
+        scene.getStylesheets().add(stylesheet);
+        stage.setScene(scene);
+    }
+
+    /**
+     * Hashes password using Sha-256
+     * @param password password to hash
+     * @return encrypted password
+     */
+    private String hashing(String password){
+    try {
+        // 256 algo
+        MessageDigest digest=MessageDigest.getInstance("Sha-256");
+
+        //hashing password to bytes
+        byte[] hashByte = digest.digest(password.getBytes());
+
+        //back to hex
+        StringBuilder hexString = new StringBuilder();
+        for (byte b: hashByte){
+            String hex = Integer.toHexString(0xff & b);
+            if (hex.length() == 1) hexString.append('0');
+            hexString.append(hex);
+        }
+        return hexString.toString();
+    } catch (NoSuchAlgorithmException e) {
+        throw new RuntimeException(e);
+    }
+
+    }
+    /**
+     * login for window
+     * @throws IOException Issues with login process
+     */
+
+    /**
+     * This method will be automatically called after the FXML elements are initialized.
+     * Initializes the SqliteUserDAO object.
+     */
+
+
+    @FXML
+    protected void loginProcess() throws IOException {
+        String username = userNameTextField.getText();
+        String password = passworPasswordField.getText();
+        String HassedPass = hashing(password);
+
+        User user = userDAO.getUser(username);
+        if (user != null){
+            if (user.getPassword().equals(HassedPass)){
+                Stage stage = (Stage) loginButton.getScene().getWindow();
+                FXMLLoader fxmlLoader = new FXMLLoader(ApplicationStart.class.getResource("Owner-Dashboard.fxml"));
+
+                DashboardController dashboardController = new DashboardController(false, user);
+                fxmlLoader.setController(dashboardController);
+
+                Scene scene = new Scene(fxmlLoader.load(), ApplicationStart.WIDTH, ApplicationStart.HEIGHT);
+                String stylesheet = ApplicationStart.class.getResource("stylesheet.css").toExternalForm();
+
+                //UserHolder holder = UserHolder.getInstance();
+                //holder.setUser(user);
+                //System.out.println(user.getUsername());
+                scene.getStylesheets().add(stylesheet);
+                stage.setScene(scene);
+
+                dashboardController.recieveData();
+
+            }else {
+                System.out.println("Invalid username");
+                InvalidPass.setVisible(true);
+            }
+        }
+        else {
+            System.out.println("Invalid username");
+            InvalidPass.setVisible(true);
+        }
+
+
+
+    }
+
+
+}
Index: src/main/java/com/example/project/controller/DashboardController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/controller/DashboardController.java b/src/main/java/com/example/project/controller/DashboardController.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/controller/DashboardController.java	
@@ -0,0 +1,32 @@
+package com.example.project.controller;
+
+import com.example.project.model.User;
+
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.control.Label;
+
+public class DashboardController {
+    User userInformation;
+    boolean Guest = false;
+   @FXML
+   private Label UserID;
+
+    @FXML
+    void recieveData(){
+
+            //System.out.println(userInformation.getUsername());
+            UserID.setText(userInformation.getUsername());
+    }
+
+    @FXML
+    public void initialize() {
+        // This method is called after the FXML file has been loaded
+        recieveData();
+    }
+
+    public DashboardController(boolean Guest, User user){
+        this.Guest = Guest;
+        this.userInformation = user;
+    }
+}
Index: target/classes/com/example/project/hello-view.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.geometry.Insets?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.VBox?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<VBox alignment=\"CENTER\" spacing=\"20.0\" xmlns:fx=\"http://javafx.com/fxml\"\r\n      fx:controller=\"com.example.project.HelloController\">\r\n  <padding>\r\n    <Insets bottom=\"20.0\" left=\"20.0\" right=\"20.0\" top=\"20.0\"/>\r\n  </padding>\r\n\r\n  <Label fx:id=\"welcomeText\"/>\r\n  <Button text=\"Hello!\" onAction=\"#onHelloButtonClick\"/>\r\n  <Button fx:id=\"registerButton\" text=\"Register\" onAction=\"#onRegisterButtonClick\"/>\r\n</VBox>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/com/example/project/hello-view.fxml b/target/classes/com/example/project/hello-view.fxml
--- a/target/classes/com/example/project/hello-view.fxml	
+++ b/target/classes/com/example/project/hello-view.fxml	
@@ -1,17 +1,33 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Button?>
 <?import javafx.scene.control.Label?>
+<?import javafx.scene.control.PasswordField?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.Pane?>
 <?import javafx.scene.layout.VBox?>
 
-<?import javafx.scene.control.Button?>
-<VBox alignment="CENTER" spacing="20.0" xmlns:fx="http://javafx.com/fxml"
-      fx:controller="com.example.project.HelloController">
-  <padding>
-    <Insets bottom="20.0" left="20.0" right="20.0" top="20.0"/>
-  </padding>
+<VBox alignment="CENTER" prefHeight="347.0" prefWidth="616.0" spacing="20" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.project.controller.LoginController">
+  <HBox fx:id="topMenu" alignment="CENTER" spacing="10" />
+  <HBox alignment="CENTER">
+      <Pane prefHeight="191.0" prefWidth="522.0" style="-fx-background-color: C8915E; -fx-opacity: 80; -fx-background-radius: 30;" stylesheets="@stylesheet.css">
+         <children>
+             <Button fx:id="loginButton" layoutX="233.0" layoutY="96.0" onAction="#loginProcess" text="Login" />
+             <Button layoutX="158.0" layoutY="96.0" text="Register" />
+          <Button fx:id="GuestLogin" layoutX="290.0" layoutY="96.0" onAction="#onGuestLoginClick" text="Guest Temp process" />
+      
+          <Label layoutX="51.0" layoutY="63.0" text="Username:" />
+          <Label layoutX="264.0" layoutY="63.0" text="Password:" />
+          <TextField fx:id="userNameTextField" layoutX="107.0" layoutY="59.0" />
+            <PasswordField fx:id="passworPasswordField" layoutX="317.0" layoutY="59.0" />
+            <Label fx:id="InvalidPass" visible="false" layoutX="198.0" layoutY="133.0" text="Bad User or Password" textFill="#721414" />
+         </children>
+      </Pane>
+  </HBox>
+  <HBox>
 
-  <Label fx:id="welcomeText"/>
-  <Button text="Hello!" onAction="#onHelloButtonClick"/>
+  </HBox>
+
   <Button fx:id="registerButton" text="Register" onAction="#onRegisterButtonClick"/>
 </VBox>
Index: src/main/java/com/example/project/controller/TimeLineController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/controller/TimeLineController.java b/src/main/java/com/example/project/controller/TimeLineController.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/controller/TimeLineController.java	
@@ -0,0 +1,144 @@
+package com.example.project.controller;
+
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Node;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.control.ScrollPane;
+import javafx.scene.layout.FlowPane;
+import javafx.scene.layout.HBox;
+import javafx.scene.layout.StackPane;
+import javafx.scene.layout.VBox;
+import javafx.stage.Stage;
+
+import java.io.IOException;
+import com.example.project.model.Project;
+import com.example.project.model.Card;
+
+public class TimeLineController {
+    @FXML
+    private ScrollPane cardSpace;
+    @FXML
+    private FlowPane TopBar;
+    @FXML
+    private Button buttonAddCard;
+    @FXML
+    private Button buttonExport;
+    @FXML
+    private Label cardStatus;
+    @FXML
+    private HBox cardHolder;
+    @FXML
+    private Label projectTitle;
+
+    private Project project;
+
+    public void initialize(int id, String title, String description, String dateCreated, String dateCompleted, String colour, int likes) {
+        // Initialize the model
+
+        // Set initial UI state
+        updateView();
+    }
+
+    /**
+     * Updates the timeline view based on stored data in timeline
+     */
+    private void updateView() {
+        projectTitle.setText(project.getTitle());
+        TopBar.setStyle("-fx-background-color: " + project.getColour() + ";");
+
+        // Update other UI elements as needed
+        if (project.getListOfCards().isEmpty()) {
+            cardStatus.setText("No cards in this project, please click add new.");
+        } else {
+            cardStatus.setText(project.getDescription());
+            addCardsToTimeline();
+        }
+    }
+
+    /**
+     * Temporary method for returning to timeline
+     * @param actionEvent Click action
+     */
+    @FXML
+    private void onReturnClick(ActionEvent actionEvent) {
+        navigateTo("Dashboard.fxml", actionEvent);
+    }
+
+    /**
+     * Temporary method for editing timeline details
+     * @param actionEvent Click action
+     */
+    @FXML
+    private void onEditClick(ActionEvent actionEvent) {
+        navigateTo("EditProject.fxml", actionEvent);
+    }
+
+
+    private void navigateTo(String fxmlFile, ActionEvent actionEvent) {
+        try {
+            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlFile));
+            Parent newRoot = loader.load();
+            Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
+            stage.setScene(new Scene(newRoot));
+            stage.show();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * Generates cards to the timeline
+     */
+    private void addCardsToTimeline(){
+        try {
+            if (cardHolder == null) {
+                return;
+            }
+
+            boolean allCardsAdded = true;
+
+            for (Card cardToAdd : project.getListOfCards()) {
+                try {
+                    StackPane cardOverlay = new StackPane();
+                    cardOverlay.prefWidthProperty().bind(cardHolder.widthProperty().multiply(0.3));
+
+                    VBox cardLayout = new VBox();
+
+                    // Top Menu Bar
+                    HBox topMenuBar = new HBox();
+                    Button returnButton = new Button("Return");
+                    Label cardTitle = new Label(cardToAdd.getTitle());
+                    topMenuBar.getChildren().addAll(returnButton, cardTitle);
+
+                    // Media Container
+                    HBox mediaContainer = new HBox();
+
+                    // Description
+                    VBox descriptionContainer = new VBox();
+                    Label descriptionTitle = new Label("Description:");
+                    Label descriptionContent = new Label(cardToAdd.getDescription());
+                    descriptionContainer.getChildren().addAll(descriptionTitle, descriptionContent);
+
+                    // Set ID
+                    cardOverlay.setId("card_" + cardToAdd.getId());
+
+                    // Add to main container
+                    cardLayout.getChildren().addAll(topMenuBar, mediaContainer, descriptionContainer);
+                    cardOverlay.getChildren().addAll(cardLayout);
+                    cardHolder.getChildren().add(cardOverlay);
+                } catch (Exception e) {
+                    e.printStackTrace();
+                    allCardsAdded = false;
+                }
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+}
\ No newline at end of file
Index: src/main/java/com/example/project/model/ISqliteUserDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/model/ISqliteUserDAO.java b/src/main/java/com/example/project/model/ISqliteUserDAO.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/model/ISqliteUserDAO.java	
@@ -0,0 +1,8 @@
+package com.example.project.model;
+import java.util.List;
+
+public interface ISqliteUserDAO {
+
+
+
+}
Index: src/main/java/com/example/project/model/CardComment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/model/CardComment.java b/src/main/java/com/example/project/model/CardComment.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/model/CardComment.java	
@@ -0,0 +1,19 @@
+package com.example.project.model;
+
+public class CardComment {
+    int ID;
+    String text;
+    String date;
+
+    public CardComment(int id,String text,String date){
+        this.ID = id;
+        this.text = text;
+        this.date = date;
+    }
+
+    public int getCommentID() {return ID;}
+
+    public String getText() {return text;}
+
+    public String getDatePublished() {return this.date;}
+}
Index: src/main/java/com/example/project/model/SqliteConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/model/SqliteConnection.java b/src/main/java/com/example/project/model/SqliteConnection.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/model/SqliteConnection.java	
@@ -0,0 +1,24 @@
+package com.example.project.model;
+
+
+import java.sql.*;
+
+public class SqliteConnection {
+    private static Connection instance = null;
+
+    private SqliteConnection() {
+        String url = "jdbc:sqlite:contacts.db";
+        try {
+            instance = DriverManager.getConnection(url);
+        } catch (SQLException sqlEx) {
+            System.err.println(sqlEx);
+        }
+    }
+
+    public static Connection getInstance() {
+        if (instance == null) {
+            new SqliteConnection();
+        }
+        return instance;
+    }
+}
Index: src/main/java/com/example/project/model/Project.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/model/Project.java b/src/main/java/com/example/project/model/Project.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/model/Project.java	
@@ -0,0 +1,215 @@
+package com.example.project.model;
+
+import com.example.project.model.Card.*;
+import javafx.scene.control.Label;
+
+import java.util.HashMap;
+import java.util.ArrayList;
+import java.util.List;
+
+import static java.lang.Integer.parseInt;
+
+public class Project {
+    private int id;
+    private Label projectTitle;
+    private List<Card> listOfCards = new List<Card>();
+    private String titleName = "Project Default Title";
+    private String description = "Project Default Description";
+    private String dateCreated = "DD/MM/YYYY";
+    private String dateFinished = "DD/MM/YYYY";
+    private boolean visibility = true;
+    private int likes = 0;
+    private String colour = "#9FA1AC";
+    private String tags;
+
+    /**
+     * Initiates project's timeline, set up
+     * @param id the id of the timeline
+     * @param title the title of the timeline
+     * @param description the description of the timeline
+     * @param dateCreated the date the project was published
+     * @param dateCompleted the date the project was completed
+     * @param colour the colour of the top bar of the project
+     * @param likes the number of likes the project has
+     */
+    public Project(int id, String title, String description, String dateCreated, String dateCompleted, boolean visibility, String colour, int likes, String tags){
+        this.id = id;
+        this.titleName = title;
+        this.description = description;
+        this.dateCreated = dateCreated;
+        this.dateFinished = dateCompleted;
+        this.visibility = visibility;
+        this.colour = colour;
+        this.likes = likes;
+        this.tags = tags;
+    }
+
+    public void SetListofCards(List<Card> cardSet){
+        this.listOfCards = cardSet;
+    }
+
+    // I dont think we need this as DOA or Controller will handle this
+    ///**
+    // * Generates cards to be added to the timeline
+    // * @param cardsToAdd list of hashmap of cards to be added
+    // * @return Returns true if the cards were added successfully, else returns false
+    // */
+    //private boolean generateCardList(List<HashMap<String, String>> cardsToAdd){
+    //    if (cardsToAdd == null || cardsToAdd.isEmpty()) {
+    //        return false; // Indicate failure or nothing to process
+    //    }
+
+    //    for (HashMap<String,String> importCard : cardsToAdd){
+    //        int addID = parseInt(importCard.get("ID"));
+    //        String addTitle = importCard.get("title");
+    //        String addDescription = importCard.get("description");
+    //        String addDateCreated = importCard.get("dateCreated");
+    //        String addDateFinished = importCard.get("dateFinished");
+    //        Card cardToImport = new Card(addID, addTitle, addDescription, addDateCreated, addDateFinished);
+    //        addCard(cardToImport);
+    //    }
+    //    return false;
+    //}
+
+
+
+    /**
+     * Retrieves the project(timeline) ID
+     * @return Returns the project ID as an int
+     */
+    public int getId(){
+        return id;
+    }
+
+    /**
+     * Sets the project(timeline) ID
+     * @param projectID The ID of the project(timeline)
+     */
+    public void setId(int projectID){
+        this.id = projectID;
+    }
+
+    /**
+     * Retrieves the project(timeline) title
+     * @return Returns the project(timeline) title as a String
+     */
+    public String getTitle(){
+        return this.titleName;
+    }
+
+    /**
+     * Sets the project(timeline) title
+     * @param timelineTitle String of the project title
+     */
+    private void setTitle(String timelineTitle){
+        this.titleName = timelineTitle;
+    }
+
+    /**
+     * Retrieves the description of the project(timeline)
+     * @return Returns the project(timeline) description as a String
+     */
+    public String getDescription (){
+        return this.description;
+    }
+
+    /**
+     * Sets the project(timeline) description
+     * @param timelineDescription The project(timeline) description
+     */
+    private void setDescription(String timelineDescription){
+        this.description = timelineDescription;
+    }
+
+    /**
+     * Retrieves the project(timeline) date of creation
+     * @return Returns the project(timeline) date of creation as a string
+     */
+    public String getDateCreated(){
+        return this.dateCreated;
+    }
+
+    /**
+     * Sets the project(timeline) date of creation
+     * @param timelineCreatedDate Date of the project(timeline) commencement as a string
+     */
+    private void setDateCreated(String timelineCreatedDate){
+        this.dateCreated = timelineCreatedDate;
+    }
+
+    /**
+     * Retrieves the project(timeline) date of completion
+     * @return Returns the project(timeline) date of completion as a string
+     */
+    public String getDateFinished(){
+        return dateFinished;
+    }
+
+    /**
+     * Sets the project(timeline) date of completion
+     * @param timelineFinishedDate Date of the project(timeline) completion as a string
+     */
+    private void setDateFinished(String timelineFinishedDate){
+        this.dateFinished = timelineFinishedDate;
+    }
+
+    /**
+     * Retrieves the project visibility
+     * @return returns the project visibility as a boolean value
+     */
+    public boolean isVisible(){
+        return this.visibility;
+    }
+
+    /**
+     * Sets the visibility of the project
+     * @param setVisibility Sets the visibility of the project
+     */
+    public void setVisibility(boolean setVisibility){
+        this.visibility = setVisibility;
+    }
+
+    /**
+     * Retrieves the project(timeline) likes
+     * @return Returns the project(timeline) likes as an int
+     */
+    public int getLikes(){
+        return this.likes;
+    }
+
+    /**
+     * Set the project(timeline) likes
+     * @param setLikes Set the number of likes the project has
+     */
+    public void setLikes(int setLikes){
+        this.likes = setLikes;
+    }
+
+    /**
+     * Retrieves the project(timeline) colour
+     * @return Returns the project(timeline) colour as a string (hexcode)
+     */
+    public String getColour(){
+        return colour;
+    }
+
+    /**
+     * Set the colour of the project
+     * @param setColour the colour of the project as a hexcode
+     */
+    public void setColour(String setColour){this.colour = setColour;}
+
+    /**
+     * Add card to list of cards
+     * @param cardAdd Card to add to list
+     */
+    public void addCard(Card cardAdd){
+        listOfCards.add(cardAdd);
+    }
+
+    public List<Card> getListOfCards(){
+        return listOfCards;
+    }
+
+    public String getTags() {return tags;}
+}
Index: src/main/java/com/example/project/model/SqliteUserDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/model/SqliteUserDAO.java b/src/main/java/com/example/project/model/SqliteUserDAO.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/model/SqliteUserDAO.java	
@@ -0,0 +1,71 @@
+package com.example.project.model;
+
+import com.example.project.model.SqliteConnection;
+
+
+import java.sql.*;
+
+
+public class SqliteUserDAO {
+    private Connection connection;
+
+    public SqliteUserDAO(){
+        connection = SqliteConnection.getInstance();
+        createTable();
+    }
+
+    private void createTable(){
+        try {
+            Statement statement = connection.createStatement();
+            String query = "CREATE TABLE IF NOT EXISTS UserAccounts ("
+                    + "username VARCHAR PRIMARY KEY,"
+                    + "password VARCHAR NOT NULL,"
+                    + "email VARCHAR NOT NULL UNIQUE"
+                    + ")";
+            statement.execute(query);
+        } catch (Exception e){
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * Gets user based on the primary key username
+     * @param username the primary key
+     * @return A User object
+     */
+    public User getUser(String username){
+        try {
+
+            PreparedStatement statement = connection.prepareStatement("SELECT * FROM UserAccounts WHERE username = ?");
+            statement.setString(1, username);
+            ResultSet resultSet = statement.executeQuery();
+            if (resultSet.next()) {
+                String password = resultSet.getString("password");
+                String email = resultSet.getString("email");
+                return new User(username, password, email);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    /**
+     * Adds user to database
+     * @param user User object
+     * @return True if upload was successful False if otherwise
+     */
+    public boolean AddUser(User user){
+        try {
+            PreparedStatement statement = connection.prepareStatement("INSERT INTO UserAccounts (username, password, email) VALUES (?, ?, ?)");
+            statement.setString(1, user.getUsername());
+            statement.setString(2, user.getPassword());
+            statement.setString(3, user.getEmail());
+            statement.executeUpdate();
+            return true;
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return false;
+    }
+}
Index: project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project.iml b/project.iml
new file mode 100644
--- /dev/null	
+++ b/project.iml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module version="4">
+  <component name="AdditionalModuleElements">
+    <content url="file://$MODULE_DIR$" dumb="true">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/Test" isTestSource="true" />
+    </content>
+  </component>
+</module>
\ No newline at end of file
Index: src/main/java/com/example/project/model/SqliteProjectDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/model/SqliteProjectDAO.java b/src/main/java/com/example/project/model/SqliteProjectDAO.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/model/SqliteProjectDAO.java	
@@ -0,0 +1,107 @@
+package com.example.project.model;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.Statement;
+
+public class SqliteProjectDAO {
+    private Connection connection;
+
+    public SqliteProjectDAO(){
+        connection = SqliteConnection.getInstance();
+        createTable();
+    }
+
+    private void createTable(){
+        try {
+            Statement statement = connection.createStatement();
+            String query = "CREATE TABLE IF NOT EXISTS Projects ("
+                    + "id INTEGER PRIMARY KEY AUTOINCREMENT,"
+                    + "username VARCHAR FOREIGN KEY,"
+                    + "title VARCHAR,"
+                    + "description VARCHAR,"
+                    + "dateCreated VARCHAR,"
+                    + "dateFinished VARCHAR,"
+                    + "visibility INTEGER,"
+                    + "likes INTEGER,"
+                    + "colour VARCHAR,"
+                    + "tags VARCHAR"
+                    + ")";
+            statement.execute(query);
+        } catch (Exception e){
+            e.printStackTrace();
+        }
+    }
+
+    public Project getProject(int id) {
+        try {
+            PreparedStatement statement = connection.prepareStatement("SELECT * FROM Projects WHERE id = ?");
+            statement.setInt(1, id);
+            ResultSet resultSet = statement.executeQuery();
+            if (resultSet.next()) {
+                String title = resultSet.getString("title");
+                String description = resultSet.getString("description");
+                String dateCreated = resultSet.getString("dateCreated");
+                String dateFinished = resultSet.getString("dateFinished");
+                boolean visibility = resultSet.getInt("visiblity") != 0;
+                int likes = resultSet.getInt("likes");
+                String colour = resultSet.getString("colour");
+                String tags = resultSet.getString("tags");
+                Project project = new Project(id, title, description, dateCreated, dateFinished, visibility, colour, likes, tags);
+                return project;
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public Project getProjects(User user) {
+        try {
+            PreparedStatement statement = connection.prepareStatement("SELECT * FROM Projects WHERE username = ?");
+            statement.setString(1, user.getUsername());
+            ResultSet resultSet = statement.executeQuery();
+            while (resultSet.next()) {
+                int id = resultSet.getInt("id");
+                String title = resultSet.getString("title");
+                String description = resultSet.getString("description");
+                String dateCreated = resultSet.getString("dateCreated");
+                String dateFinished = resultSet.getString("dateFinished");
+                boolean visibility = resultSet.getInt("visiblity") != 0;
+                int likes = resultSet.getInt("likes");
+                String colour = resultSet.getString("colour");
+                String tags = resultSet.getString("tags");
+                Project project = new Project(id, title, description, dateCreated, dateFinished, visibility, colour, likes, tags);
+                user.addProject(project);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public void addProject(Project project, User user) {
+        try {
+            PreparedStatement statement = connection.prepareStatement(
+                    "INSERT INTO Projects (username, title, description, dateCreated, dateFinsihed, visibility, likes, colour, tags) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
+            statement.setString(1, user.getUsername());
+            statement.setString(2, project.getTitle());
+            statement.setString(3, project.getDescription());
+            statement.setString(4, project.getDateCreated());
+            statement.setString(5, project.getDateFinished());
+            statement.setBoolean(6, project.isVisible());
+            statement.setInt(7, project.getLikes());
+            statement.setString(8, project.getColour());
+            statement.setString(9, project.getTags());
+            statement.executeUpdate();
+            // Set the id of the new project
+            ResultSet generatedKeys = statement.getGeneratedKeys();
+            if (generatedKeys.next()) {
+                project.setId(generatedKeys.getInt(1));
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+}
Index: src/main/java/com/example/project/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/model/User.java b/src/main/java/com/example/project/model/User.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/example/project/model/User.java	
@@ -0,0 +1,29 @@
+package com.example.project.model;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class User {
+    private String username;
+    private String password;
+    private String email;
+    private List<Project> projects = new ArrayList<>();
+
+    public User(String username, String password, String email){
+        this.username = username;
+        this.password = password;
+        this.email = email;
+    }
+
+    public String getUsername() {return username;}
+    public String getPassword() {return password;}
+    public String getEmail() {return email;}
+    public List<Project> getProjects() {return projects;}
+    public void setUsername(String username){this.username = username;}
+
+    public void setPassword(String password){this.password=password;}
+
+    public void addProject(Project project){
+        this.projects.add(project);
+    }
+}
Index: src/main/Test/TestLogin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/Test/TestLogin.java b/src/main/Test/TestLogin.java
new file mode 100644
--- /dev/null	
+++ b/src/main/Test/TestLogin.java	
@@ -0,0 +1,36 @@
+
+import com.example.project.model.User;
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class TestLogin {
+    @Test
+    void testUsernameAndPassword() {
+        // Create a new Login object
+        User login = new User("testuser", "testpassword", "testemail");
+
+        // Assert that the username and password are correctly set
+        assertEquals("testuser", login.getUsername(), "Username should be 'testuser'");
+        assertEquals("testpassword", login.getPassword(), "Password should be 'testpassword'");
+
+        // Update the username and password
+        login.setUsername("newuser");
+        login.setPassword("newpassword");
+
+        // Assert that the username and password have been updated
+        assertEquals("newuser", login.getUsername(), "Username should be 'newuser'");
+        assertEquals("newpassword", login.getPassword(), "Password should be 'newpassword'");
+    }
+
+    @Test
+    void testEmptyLogin() {
+        // Test an empty Login object
+        User emptyLogin = new User("", "", "");
+
+        // Assert that both username and password are empty strings
+        assertEquals("", emptyLogin.getUsername(), "Username should be an empty string");
+        assertEquals("", emptyLogin.getPassword(), "Password should be an empty string");
+    }
+
+
+}
Index: src/main/Test/TestComment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/Test/TestComment.java b/src/main/Test/TestComment.java
new file mode 100644
--- /dev/null	
+++ b/src/main/Test/TestComment.java	
@@ -0,0 +1,37 @@
+import com.example.project.model.Card;
+import com.example.project.model.CardComment;
+import com.example.project.model.User;
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class TestComment {
+    @Test
+    void commentID(){
+        int id = 0;
+        String comment = "This is a comment.";
+        String date = "23/11/1963";
+        CardComment commentData = new CardComment(id, comment, date);
+
+        assertEquals(id, commentData.getCommentID());
+    }
+
+    @Test
+    void commentText(){
+        int id = 0;
+        String comment = "This is a comment.";
+        String date = "23/11/1963";
+        CardComment commentData = new CardComment(id, comment, date);
+
+        assertEquals(comment, commentData.getText());
+    }
+
+    @Test
+    void commentDatePublished(){
+        int id = 0;
+        String comment = "This is a comment.";
+        String date = "23/11/1963";
+        CardComment commentData = new CardComment(id, comment, date);
+
+        assertEquals(date, commentData.getDatePublished());
+    }
+}
Index: src/main/Test/TestUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/Test/TestUser.java b/src/main/Test/TestUser.java
new file mode 100644
--- /dev/null	
+++ b/src/main/Test/TestUser.java	
@@ -0,0 +1,67 @@
+import com.example.project.model.Project;
+import com.example.project.model.User;
+import org.junit.jupiter.api.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class TestUser {
+
+    private List<Project> ProjectLists(){
+        List<Project> listOfProjects = new ArrayList<>();
+        Project projectToTest = new Project(0,"TestTitle","TestDescription","23/11/1963","23/11/1963", "#", 0);
+        listOfProjects.add(projectToTest);
+        return listOfProjects;
+    }
+
+
+    @Test
+    void setUsername(){
+        String username = "testUsername";
+        String password = "testPassword";
+        String email = "testEmail";
+
+        User tempUser = new User(username,password,email);
+
+        assertEquals(username,tempUser.getUsername());
+    }
+
+    @Test
+    void setPassword(){
+        String username = "testUsername";
+        String password = "testPassword";
+        String email = "testEmail";
+
+        User tempUser = new User(username,password,email);
+
+        assertEquals(password,tempUser.getPassword());
+    }
+
+    @Test
+    void setEmail(){
+        String username = "testUsername";
+        String password = "testPassword";
+        String email = "testEmail";
+
+
+        User tempUser = new User(username,password,email);
+
+        assertEquals(username,tempUser.getEmail());
+    }
+
+    @Test
+    void setProjects(){
+        String username = "testUsername";
+        String password = "testPassword";
+        String email = "testEmail";
+
+        User tempUser = new User(username,password,email);
+        List<Project> projectList = ProjectLists();
+        assertEquals(projectList,tempUser.getProjects());
+    }
+
+
+
+}
Index: src/main/Test/TestProject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/Test/TestProject.java b/src/main/Test/TestProject.java
new file mode 100644
--- /dev/null	
+++ b/src/main/Test/TestProject.java	
@@ -0,0 +1,137 @@
+import com.example.project.model.Card;
+import com.example.project.model.Project;
+import org.junit.jupiter.api.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class TestProject {
+
+    public Project projectSetup(){
+        int testID = 0;
+        String testTitle = "testTitle";
+        String testDescription = "testDescription";
+        String testDateCreated = "23/11/1963";
+        String testDateCompleted = "23/11/1963";
+        String testColour = "#ffffff";
+        int testLikes = 0;
+        return new Project(testID, testTitle, testDescription, testDateCreated, testDateCompleted, testColour, testLikes);
+    }
+
+    public List<Card> randomCardListSetup(int numberOfCards){
+        List<Card> setOfCards = new ArrayList<>();
+
+        if (numberOfCards != 0){
+            for (int i = 0; i < numberOfCards; i++){
+                String cardTitle = RandomString(5);
+                String cardDescription = RandomString(20);
+                String dateCreated = "23/11/1963";
+                String dateFinished = "23/11/1963";
+                Card randomCard = new Card(i,cardTitle,cardDescription,dateCreated,dateFinished);
+                setOfCards.add(randomCard);
+            }
+        }
+        return setOfCards;
+    }
+
+    public String RandomString(int CharacterLength){
+        StringBuilder randomString = new StringBuilder();
+        String setCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
+        int characterSetLength = setCharacters.length();
+        int counter = 0;
+        while (counter < CharacterLength) {
+            randomString.append(setCharacters.charAt((int) Math.floor(Math.random() * characterSetLength)));
+            counter += 1;
+        }
+        return randomString.toString();
+    }
+    @Test
+    void testCardImportNone() {
+        int numberTested = 0;
+        //Setup List of Cards
+        List<Card> testCardList = randomCardListSetup(numberTested);
+
+        //Setup Timeline Object
+        Project testProject = projectSetup();
+        testProject.SetListofCards(testCardList);
+
+        //Test
+        assertEquals(testProject.getListOfCards(),testCardList,"No cards added test");
+    }
+
+    @Test
+    void testCardImportOne() {
+        int numberTested = 1;
+        //Setup List of Cards
+        List<Card> testCardList = randomCardListSetup(numberTested);
+
+        //Setup Timeline Object
+        Project testProject = projectSetup();
+        testProject.SetListofCards(testCardList);
+
+        //Test
+        assertEquals(testProject.getListOfCards(),testCardList,"No cards added test");
+    }
+
+    @Test
+    void testCardImportFive() {
+        int numberTested = 5;
+        //Setup List of Cards
+        List<Card> testCardList = randomCardListSetup(numberTested);
+
+        //Setup Timeline Object
+        Project testProject = projectSetup();
+        testProject.SetListofCards(testCardList);
+
+        //Test
+        assertEquals(testProject.getListOfCards(),testCardList,"No cards added test");
+    }
+
+    @Test
+    void testCardAddOne(){
+        int numberTested = 1;
+        //Setup List of Cards
+        List<Card> testCardList = randomCardListSetup(1);
+
+        //Setup Timeline Object
+        Project testProject = projectSetup();
+        testProject.SetListofCards(testCardList);
+
+        //New Card
+        List<Card> newCard = randomCardListSetup(numberTested);
+
+        for (Card card : newCard) {
+            testProject.addCard(card);
+            testCardList.add(card);
+        }
+
+        //Test
+        assertEquals(testProject.getListOfCards(),testCardList,"No cards added test");
+    }
+
+    @Test
+    void testCardAddFive(){
+        int numberTested = 5;
+        //Setup List of Cards
+        List<Card> testCardList = randomCardListSetup(1);
+
+        //Setup Timeline Object
+        Project testProject = projectSetup();
+        testProject.SetListofCards(testCardList);
+
+        //New Card
+        List<Card> newCard = randomCardListSetup(numberTested);
+
+        for (Card card : newCard) {
+            testProject.addCard(card);
+            testCardList.add(card);
+        }
+
+        //Test
+        assertEquals(testProject.getListOfCards(),testCardList,"No cards added test");
+    }
+
+
+}
Index: src/main/resources/com/example/project/Register.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/example/project/Register.fxml b/src/main/resources/com/example/project/Register.fxml
new file mode 100644
--- /dev/null	
+++ b/src/main/resources/com/example/project/Register.fxml	
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.PasswordField?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.Pane?>
+<?import javafx.scene.layout.VBox?>
+
+<VBox alignment="CENTER" prefHeight="347.0" prefWidth="616.0" spacing="20" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.project.controller.RegisterController">
+  <HBox fx:id="topMenu" alignment="CENTER" spacing="10" />
+  <HBox alignment="CENTER">
+      <Pane prefHeight="220.0" prefWidth="522.0" style="-fx-background-color: C8915E; -fx-opacity: 80; -fx-background-radius: 30;" stylesheets="@stylesheet.css">
+         <children>
+             <Button layoutX="267.0" layoutY="172.0" text="Register" />
+      
+          <Label layoutX="152.0" layoutY="18.0" text="Username:" />
+          <Label layoutX="153.0" layoutY="49.0" text="Password:" />
+          <TextField fx:id="userNameTextField" layoutX="208.0" layoutY="14.0" />
+            <PasswordField fx:id="passworPasswordField" layoutX="206.0" layoutY="45.0" />
+            <Label fx:id="InvalidPass" layoutX="198.0" layoutY="133.0" text="Bad User or Password" textFill="#721414" visible="false" />
+            <Label layoutX="104.0" layoutY="140.0" text="Recovery Answer" />
+            <Label layoutX="207.0" layoutY="110.0" text="What is your favourite animal" />
+            <Button layoutX="214.0" layoutY="172.0" text="Back" />
+            <Label layoutX="164.0" layoutY="80.0" text="Email:" />
+            <TextField fx:id="emailTextField" layoutX="206.0" layoutY="76.0" text="Email" />
+            <TextField fx:id="RecoveryTextField11" layoutX="208.0" layoutY="138.0" text="Recovery" />
+         </children>
+      </Pane>
+  </HBox>
+  <HBox>
+
+  </HBox>
+
+</VBox>
Index: src/main/resources/com/example/project/Owner-Dashboard.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/example/project/Owner-Dashboard.fxml b/src/main/resources/com/example/project/Owner-Dashboard.fxml
new file mode 100644
--- /dev/null	
+++ b/src/main/resources/com/example/project/Owner-Dashboard.fxml	
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.effect.DropShadow?>
+<?import javafx.scene.layout.Pane?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.text.Font?>
+<?import javafx.scene.text.Text?>
+
+<VBox alignment="TOP_CENTER" prefHeight="411.0" prefWidth="596.0" spacing="20" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1">
+   <Pane prefHeight="48.0" prefWidth="596.0" style="-fx-background-color: A1662F;">
+      <children>
+         <Button layoutX="534.0" layoutY="9.0" mnemonicParsing="false" style="-fx-background-color: A1662F; -fx-background-radius: 50;" stylesheets="@stylesheet.css" text="Logout">
+            <effect>
+               <DropShadow />
+            </effect>
+         </Button>
+         <Button layoutX="14.0" layoutY="12.0" mnemonicParsing="false" style="-fx-background-color: A1662F; -fx-background-radius: 50;" text="Search">
+            <effect>
+               <DropShadow />
+            </effect>
+         </Button>
+         <Button layoutX="79.0" layoutY="12.0" mnemonicParsing="false" style="-fx-background-color: A1662F; -fx-background-radius: 50;" text="Dashboard">
+            <effect>
+               <DropShadow />
+            </effect>
+         </Button>
+         <Text layoutX="236.0" layoutY="32.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Model Hut">
+            <font>
+               <Font name="Forte" size="25.0" />
+            </font>
+         </Text>
+         <Label fx:id="UserID" layoutX="442.0" layoutY="13.0" text="Guest" />
+      </children>
+   </Pane>
+
+</VBox>
Index: src/main/resources/com/example/project/styles.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/example/project/styles.css b/src/main/resources/com/example/project/styles.css
new file mode 100644
--- /dev/null	
+++ b/src/main/resources/com/example/project/styles.css	
@@ -0,0 +1,41 @@
+.root {
+    -fx-background-color: #F5F5F5; /* خلفية رمادية فاتحة */
+}
+
+.label-title {
+    -fx-font-size: 24px;
+    -fx-font-weight: bold;
+    -fx-background-color: #B0BEC5;
+    -fx-padding: 10px;
+    -fx-border-radius: 10;
+    -fx-background-radius: 10;
+}
+
+.button-back {
+    -fx-background-color: #CFD8DC;
+    -fx-font-size: 14px;
+    -fx-background-radius: 5;
+}
+
+.container {
+    -fx-background-color: #ECEFF1;
+    -fx-border-color: #90A4AE;
+    -fx-border-width: 2;
+    -fx-border-radius: 10;
+    -fx-background-radius: 10;
+    -fx-padding: 20;
+    -fx-spacing: 15;
+}
+
+.card-image {
+    -fx-background-color: #4E342E;
+    -fx-padding: 10;
+    -fx-background-radius: 5;
+}
+
+.button-publish {
+    -fx-background-color: #78909C;
+    -fx-font-size: 16px;
+    -fx-text-fill: white;
+    -fx-background-radius: 5;
+}
Index: src/main/resources/com/example/project/create-new-project.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/example/project/create-new-project.fxml b/src/main/resources/com/example/project/create-new-project.fxml
new file mode 100644
--- /dev/null	
+++ b/src/main/resources/com/example/project/create-new-project.fxml	
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.ComboBox?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TextArea?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.image.Image?>
+<?import javafx.scene.image.ImageView?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.VBox?>
+
+<AnchorPane xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.project.controller.CreateNewProjectController" stylesheets="@styles.css">
+    <VBox spacing="15" prefWidth="800" prefHeight="450" alignment="TOP_CENTER">
+        <HBox spacing="10" alignment="CENTER_LEFT" styleClass="label-title">
+            <Button text="←" onAction="#goBack" styleClass="button-back"/>
+            <Label text="Make New Project Timeline"/>
+        </HBox>
+        <HBox spacing="20" alignment="CENTER" styleClass="container">
+            <VBox spacing="10" alignment="CENTER_LEFT">
+                <Label text="Title:"/>
+                <TextField fx:id="titleField"/>
+                <Label text="Description:"/>
+                <TextArea fx:id="descriptionField" prefRowCount="4"/>
+                <Label text="Set Visibility:"/>
+                <ComboBox fx:id="visibilityComboBox"/>
+            </VBox>
+            <VBox spacing="10" alignment="CENTER" styleClass="card-image">
+                <Label text="Card Image:" style="-fx-text-fill: #FFFFFF;"/>
+                <ImageView fx:id="cardImageView" fitWidth="200" fitHeight="100">
+                    <image>
+                        <Image url="@images/card_image.png"/>
+                    </image>
+                </ImageView>
+                <Label text="Colour:" style="-fx-text-fill: #FFFFFF;"/>
+                <TextField fx:id="colourField" text="Kopi Luwak" />
+            </VBox>
+        </HBox>
+        <Button text="Publish Project" onAction="#publishProject" styleClass="button-publish"/>
+    </VBox>
+</AnchorPane>
Index: src/main/resources/com/example/project/stylesheet.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/example/project/stylesheet.css b/src/main/resources/com/example/project/stylesheet.css
new file mode 100644
--- /dev/null	
+++ b/src/main/resources/com/example/project/stylesheet.css	
@@ -0,0 +1,3 @@
+#topMenu{
+    -background-color:#656691
+}
\ No newline at end of file
Index: target/classes/com/example/project/Register.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/com/example/project/Register.fxml b/target/classes/com/example/project/Register.fxml
new file mode 100644
--- /dev/null	
+++ b/target/classes/com/example/project/Register.fxml	
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.PasswordField?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.Pane?>
+<?import javafx.scene.layout.VBox?>
+
+<VBox alignment="CENTER" prefHeight="347.0" prefWidth="616.0" spacing="20" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.project.controller.RegisterController">
+  <HBox fx:id="topMenu" alignment="CENTER" spacing="10" />
+  <HBox alignment="CENTER">
+      <Pane prefHeight="220.0" prefWidth="522.0" style="-fx-background-color: C8915E; -fx-opacity: 80; -fx-background-radius: 30;" stylesheets="@stylesheet.css">
+         <children>
+             <Button layoutX="267.0" layoutY="172.0" text="Register" />
+      
+          <Label layoutX="152.0" layoutY="18.0" text="Username:" />
+          <Label layoutX="153.0" layoutY="49.0" text="Password:" />
+          <TextField fx:id="userNameTextField" layoutX="208.0" layoutY="14.0" />
+            <PasswordField fx:id="passworPasswordField" layoutX="206.0" layoutY="45.0" />
+            <Label fx:id="InvalidPass" layoutX="198.0" layoutY="133.0" text="Bad User or Password" textFill="#721414" visible="false" />
+            <Label layoutX="104.0" layoutY="140.0" text="Recovery Answer" />
+            <Label layoutX="207.0" layoutY="110.0" text="What is your favourite animal" />
+            <Button layoutX="214.0" layoutY="172.0" text="Back" />
+            <Label layoutX="164.0" layoutY="80.0" text="Email:" />
+            <TextField fx:id="emailTextField" layoutX="206.0" layoutY="76.0" text="Email" />
+            <TextField fx:id="RecoveryTextField11" layoutX="208.0" layoutY="138.0" text="Recovery" />
+         </children>
+      </Pane>
+  </HBox>
+  <HBox>
+
+  </HBox>
+
+</VBox>
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/modules.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/project.iml" filepath="$PROJECT_DIR$/project.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/libraries/xerial_sqlite_jdbc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/xerial_sqlite_jdbc.xml b/.idea/libraries/xerial_sqlite_jdbc.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/libraries/xerial_sqlite_jdbc.xml	
@@ -0,0 +1,10 @@
+<component name="libraryTable">
+  <library name="xerial.sqlite.jdbc" type="repository">
+    <properties maven-id="org.xerial:sqlite-jdbc:3.36.0.3" />
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/xerial/sqlite-jdbc/3.36.0.3/sqlite-jdbc-3.36.0.3.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: target/classes/com/example/project/stylesheet.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/com/example/project/stylesheet.css b/target/classes/com/example/project/stylesheet.css
new file mode 100644
--- /dev/null	
+++ b/target/classes/com/example/project/stylesheet.css	
@@ -0,0 +1,3 @@
+#topMenu{
+    -background-color:#656691
+}
\ No newline at end of file
Index: target/classes/com/example/project/Owner-Dashboard.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/com/example/project/Owner-Dashboard.fxml b/target/classes/com/example/project/Owner-Dashboard.fxml
new file mode 100644
--- /dev/null	
+++ b/target/classes/com/example/project/Owner-Dashboard.fxml	
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.effect.DropShadow?>
+<?import javafx.scene.layout.Pane?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.text.Font?>
+<?import javafx.scene.text.Text?>
+
+<VBox alignment="TOP_CENTER" prefHeight="411.0" prefWidth="596.0" spacing="20" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1">
+   <Pane prefHeight="48.0" prefWidth="596.0" style="-fx-background-color: A1662F;">
+      <children>
+         <Button layoutX="534.0" layoutY="9.0" mnemonicParsing="false" style="-fx-background-color: A1662F; -fx-background-radius: 50;" stylesheets="@stylesheet.css" text="Logout">
+            <effect>
+               <DropShadow />
+            </effect>
+         </Button>
+         <Button layoutX="14.0" layoutY="12.0" mnemonicParsing="false" style="-fx-background-color: A1662F; -fx-background-radius: 50;" text="Search">
+            <effect>
+               <DropShadow />
+            </effect>
+         </Button>
+         <Button layoutX="79.0" layoutY="12.0" mnemonicParsing="false" style="-fx-background-color: A1662F; -fx-background-radius: 50;" text="Dashboard">
+            <effect>
+               <DropShadow />
+            </effect>
+         </Button>
+         <Text layoutX="236.0" layoutY="32.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Model Hut">
+            <font>
+               <Font name="Forte" size="25.0" />
+            </font>
+         </Text>
+         <Label fx:id="UserID" layoutX="442.0" layoutY="13.0" text="Guest" />
+      </children>
+   </Pane>
+
+</VBox>
Index: target/classes/com/example/project/create-new-project.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/com/example/project/create-new-project.fxml b/target/classes/com/example/project/create-new-project.fxml
new file mode 100644
--- /dev/null	
+++ b/target/classes/com/example/project/create-new-project.fxml	
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.ComboBox?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TextArea?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.image.Image?>
+<?import javafx.scene.image.ImageView?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.VBox?>
+
+<AnchorPane xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.project.controller.CreateNewProjectController" stylesheets="@styles.css">
+    <VBox spacing="15" prefWidth="800" prefHeight="450" alignment="TOP_CENTER">
+        <HBox spacing="10" alignment="CENTER_LEFT" styleClass="label-title">
+            <Button text="←" onAction="#goBack" styleClass="button-back"/>
+            <Label text="Make New Project Timeline"/>
+        </HBox>
+        <HBox spacing="20" alignment="CENTER" styleClass="container">
+            <VBox spacing="10" alignment="CENTER_LEFT">
+                <Label text="Title:"/>
+                <TextField fx:id="titleField"/>
+                <Label text="Description:"/>
+                <TextArea fx:id="descriptionField" prefRowCount="4"/>
+                <Label text="Set Visibility:"/>
+                <ComboBox fx:id="visibilityComboBox"/>
+            </VBox>
+            <VBox spacing="10" alignment="CENTER" styleClass="card-image">
+                <Label text="Card Image:" style="-fx-text-fill: #FFFFFF;"/>
+                <ImageView fx:id="cardImageView" fitWidth="200" fitHeight="100">
+                    <image>
+                        <Image url="@images/card_image.png"/>
+                    </image>
+                </ImageView>
+                <Label text="Colour:" style="-fx-text-fill: #FFFFFF;"/>
+                <TextField fx:id="colourField" text="Kopi Luwak" />
+            </VBox>
+        </HBox>
+        <Button text="Publish Project" onAction="#publishProject" styleClass="button-publish"/>
+    </VBox>
+</AnchorPane>
Index: target/classes/com/example/project/styles.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/com/example/project/styles.css b/target/classes/com/example/project/styles.css
new file mode 100644
--- /dev/null	
+++ b/target/classes/com/example/project/styles.css	
@@ -0,0 +1,41 @@
+.root {
+    -fx-background-color: #F5F5F5; /* خلفية رمادية فاتحة */
+}
+
+.label-title {
+    -fx-font-size: 24px;
+    -fx-font-weight: bold;
+    -fx-background-color: #B0BEC5;
+    -fx-padding: 10px;
+    -fx-border-radius: 10;
+    -fx-background-radius: 10;
+}
+
+.button-back {
+    -fx-background-color: #CFD8DC;
+    -fx-font-size: 14px;
+    -fx-background-radius: 5;
+}
+
+.container {
+    -fx-background-color: #ECEFF1;
+    -fx-border-color: #90A4AE;
+    -fx-border-width: 2;
+    -fx-border-radius: 10;
+    -fx-background-radius: 10;
+    -fx-padding: 20;
+    -fx-spacing: 15;
+}
+
+.card-image {
+    -fx-background-color: #4E342E;
+    -fx-padding: 10;
+    -fx-background-radius: 5;
+}
+
+.button-publish {
+    -fx-background-color: #78909C;
+    -fx-font-size: 16px;
+    -fx-text-fill: white;
+    -fx-background-radius: 5;
+}
Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module com.example.project {\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n\r\n\r\n    opens com.example.project to javafx.fxml;\r\n    exports com.example.project;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
--- a/src/main/java/module-info.java	
+++ b/src/main/java/module-info.java	
@@ -1,8 +1,13 @@
 module com.example.project {
     requires javafx.controls;
     requires javafx.fxml;
+    requires java.desktop;
 
 
     opens com.example.project to javafx.fxml;
     exports com.example.project;
+    exports com.example.project.Timeline;
+    opens com.example.project.Timeline to javafx.fxml;
+    exports com.example.project.controller;
+    opens com.example.project.controller to javafx.fxml;
 }
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n\r\n  <groupId>com.example</groupId>\r\n  <artifactId>project</artifactId>\r\n  <version>1.0-SNAPSHOT</version>\r\n  <name>project</name>\r\n\r\n  <properties>\r\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n<junit.version>5.10.0</junit.version>  </properties>\r\n\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>org.openjfx</groupId>\r\n      <artifactId>javafx-controls</artifactId>\r\n      <version>21</version>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>org.openjfx</groupId>\r\n      <artifactId>javafx-fxml</artifactId>\r\n      <version>21</version>\r\n    </dependency>\r\n\r\n<dependency>\r\n      <groupId>org.junit.jupiter</groupId>\r\n      <artifactId>junit-jupiter-api</artifactId>\r\n      <version>${junit.version}</version>\r\n      <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>org.junit.jupiter</groupId>\r\n      <artifactId>junit-jupiter-engine</artifactId>\r\n      <version>${junit.version}</version>\r\n      <scope>test</scope>\r\n    </dependency>  </dependencies>\r\n\r\n  <build>\r\n    <plugins>\r\n      <plugin>\r\n        <groupId>org.apache.maven.plugins</groupId>\r\n        <artifactId>maven-compiler-plugin</artifactId>\r\n        <version>3.11.0</version>\r\n        <configuration>\r\n          <source>21</source>\r\n          <target>21</target>\r\n        </configuration>\r\n      </plugin>\r\n      <plugin>\r\n        <groupId>org.openjfx</groupId>\r\n        <artifactId>javafx-maven-plugin</artifactId>\r\n        <version>0.0.8</version>\r\n        <executions>\r\n          <execution>\r\n            <!-- Default configuration for running with: mvn clean javafx:run -->\r\n            <id>default-cli</id>\r\n            <configuration>\r\n              <mainClass>com.example.project/com.example.project.HelloApplication</mainClass>\r\n              <launcher>app</launcher>\r\n              <jlinkZipName>app</jlinkZipName>\r\n              <jlinkImageName>app</jlinkImageName>\r\n              <noManPages>true</noManPages>\r\n              <stripDebug>true</stripDebug>\r\n              <noHeaderFiles>true</noHeaderFiles>\r\n            </configuration>\r\n          </execution>\r\n        </executions>\r\n      </plugin>\r\n    </plugins>\r\n  </build>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	
+++ b/pom.xml	
@@ -58,7 +58,7 @@
             <!-- Default configuration for running with: mvn clean javafx:run -->
             <id>default-cli</id>
             <configuration>
-              <mainClass>com.example.project/com.example.project.HelloApplication</mainClass>
+              <mainClass>com.example.project/com.example.project.ApplicationStart</mainClass>
               <launcher>app</launcher>
               <jlinkZipName>app</jlinkZipName>
               <jlinkImageName>app</jlinkImageName>
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/uiDesigner.xml	
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
